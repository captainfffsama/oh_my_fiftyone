# -*- coding: utf-8 -*-
'''
@Author: captainsama
@Date: 2023-03-10 10:11:17
@LastEditors: captainsama tuanzhangsama@outlook.com
@LastEditTime: 2023-03-10 10:15:35
@FilePath: /dataset_manager/core/model/object_detection/proto/dldetection_pb2_grpc.py
@Description:
'''
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import dldetection_pb2 as dldetection__pb2


class AiServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DlDetection = channel.unary_unary(
                '/aiservice.AiService/DlDetection',
                request_serializer=dldetection__pb2.DlRequest.SerializeToString,
                response_deserializer=dldetection__pb2.DlResponse.FromString,
                )


class AiServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DlDetection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DlDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.DlDetection,
                    request_deserializer=dldetection__pb2.DlRequest.FromString,
                    response_serializer=dldetection__pb2.DlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aiservice.AiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AiService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DlDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aiservice.AiService/DlDetection',
            dldetection__pb2.DlRequest.SerializeToString,
            dldetection__pb2.DlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
